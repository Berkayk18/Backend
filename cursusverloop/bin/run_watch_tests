#!/bin/bash
#
# Runs the unit tests automatically when files are changed.
# This does not use the tox.ini-based tests, but a more terse
# unit test only run. This makes it more useful for doing TDD
# than the full fledged output from tox.

SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
cd "$SCRIPT_DIR"/.. || exit 1

LOCK_FILE=$(echo "${BASH_SOURCE[0]}" | md5sum | cut -d " " -f 1)
LOCK_PATH="/tmp/watch-test-lock-$LOCK_FILE"

if [ -z "$WATCH_ME_DO" ]; then
    clear
    echo "Watching project for changes"
    echo "Tests will be run when changes are detected"

    export WATCH_ME_DO="go for it!"

    watchmedo \
        shell-command --command="./bin/run_watch_tests" \
        --patterns='*.py;*.j2;*.yaml;.env.dev;.env' \
        --recursive \
        --verbose \
        --drop \
        --ignore-directories \
        .
else
    (
        flock 200 > /dev/null 2>&1 || exit 0
        clear
        export PYTHONPATH=./src/
        echo "Running tests ..."
        coverage run -m pytest tests/unit/
        coverage xml > /dev/null
        echo -n "Coverage percentage: "
        coverage report --format=total --precision=1
        mypy src/
    ) 200>>"$LOCK_PATH"
fi
